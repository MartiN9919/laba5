#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <Windows.h>

using namespace std;

//указатель на внешний тип
typedef HANDLE(_cdecl* LPFNDLLinit)(char *, char *);//соглашение о вызовах по умолчанию для программ на C и C ++

int main()
{
	char directory[MAX_PATH];
	char outputFileName[11] = "output.txt";

	GetCurrentDirectory(MAX_PATH, directory);
	strcat(directory, "\\"); // добавить к строке str строку, передаваемую во втором параметре

	HINSTANCE hLib = LoadLibrary("Lab5Dll.dll");		//загружаем dll    является дескриптором экземпляра окна (это некий код оконной процедуры, идентификатор, по которой ОС будет отличать её от остальных окон).
	if (!hLib)
	{
		cout << "To work we need Lab5Dll.dll!\n";
		exit(0);
	}

	//LPFNDLLinit init = (LPFNDLLinit)GetProcAddress(hLib, TEXT("init"));//Получить адрес переменной или функции из библиотеки
	//HANDLE WriteOffEvent = init(directory, outputFileName);

	if (WriteOffEvent == 0)
	{
		cout << "Error of input information!\n";
		exit(0);
	}
	//начальным адресом для потока
	LPTHREAD_START_ROUTINE  reader = (LPTHREAD_START_ROUTINE)GetProcAddress(hLib, TEXT("ThreadReader"));//Получить адрес переменной или функции из библиотеки Указывает на функцию, которая уведомляет узел о том, что поток начал выполняться.
	LPTHREAD_START_ROUTINE  writer = (LPTHREAD_START_ROUTINE)GetProcAddress(hLib, TEXT("ThreadWriter"));//Получить адрес переменной или функции из библиотеки

	//создаём потоки чтения и записи
	HANDLE threadReader = CreateThread(NULL, 0, reader, NULL, 0, 0);//атрибуты безопасности потока;размер стека, выделяемого под поток;адрес потоковой функции.указатель на параметры,флаг создания потока,указатель, по которому будет записан идентификатор.
	HANDLE threadWriter = CreateThread(NULL, 0, writer, NULL, 0, 0);

	//ожидаем конца операции у обоих потоков
	WaitForSingleObject(threadReader, INFINITE);
	WaitForSingleObject(WriteOffEvent, INFINITE);

	CloseHandle(threadReader);						//очищаем дескрипторы потоков
	CloseHandle(threadWriter);

	cout << "Combining completed successfully!\n";
	FreeLibrary(hLib);								//убираем из памяти dll
	//system("pause");
	//exit(0);

}